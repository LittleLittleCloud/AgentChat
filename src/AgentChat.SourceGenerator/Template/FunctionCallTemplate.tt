﻿<#@ template language="C#" linePragmas="false" visibility = "internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
//----------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//----------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using Azure.AI.OpenAI;
using System.Text.Json;
using System.Threading.Tasks;
using System;

<#if (!String.IsNullOrEmpty(NameSpace)) {#>
namespace <#=NameSpace#>
{
<#}#>
    public partial class <#=ClassName#>
    {
<#foreach (var functionContract in FunctionContracts) {#>

        private class <#=functionContract.GetFunctionSchemaClassName()#>
        {
<#foreach (var parameter in functionContract.Parameters) {#>
<#if (parameter.IsOptional) {#>
			public <#=parameter.Type#> <#=parameter.Name#> {get; set;} = <#=parameter.DefaultValue#>;
<#} else {#>
			public <#=parameter.Type#> <#=parameter.Name#> {get; set;}
<#}#>
<#}#>
        }

        public <#=functionContract.ReturnType#> <#=functionContract.GetFunctionWrapperName()#>(string arguments)
        {
            var schema = JsonSerializer.Deserialize<<#=functionContract.GetFunctionSchemaClassName()#>>(
                arguments, 
                new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                });
<# var argumentLists = string.Join(", ", functionContract.Parameters.Select(p => $"schema.{p.Name}")); #>

            return <#=functionContract.Name#>(<#=argumentLists#>);
        }

        public FunctionDefinition <#=functionContract.GetFunctionDefinitionName()#>
        {
            get => new FunctionDefinition
			{
				Name = @"<#=functionContract.Name#>",
                Description = """
<#=functionContract.Description#>
""",
                Parameters = BinaryData.FromObjectAsJson(new
                {
                    Type = "object",
                    Properties = new
					{
<#foreach (var parameter in functionContract.Parameters) {#>
					    <#=parameter.Name#> = new
					    {
						    Type = @"<#=parameter.JsonType#>",
<#if(parameter.JsonType == "array" && parameter.JsonItemType != null) {#>
                            Items = new
							{
								Type = @"<#=parameter.JsonItemType#>",
							},
<#}#>
						    Description = @"<#=parameter.Description#>",
<#if (parameter.IsOptional) {#>
						    IsOptional = <#=parameter.IsOptional.ToString().ToLower()#>,
<#}#>
<#if (parameter.DefaultValue != null && parameter.DefaultValue != "null") {#>
						    DefaultValue = <#=parameter.DefaultValue#>,
<#}#>
					    },
<#}#>
                    },
                    Required = new []
					{
<#foreach (var parameter in functionContract.Parameters.Where(p => !p.IsOptional)) {#>
					    "<#=parameter.Name#>",
<#}#>
					},
                },
                new JsonSerializerOptions
				{
					PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
				})
            };
        }
<#}#>
    }
<#if (!String.IsNullOrEmpty(NameSpace)) {#>
}
<#}#>

<#+
public string NameSpace {get; set;}
public string ClassName {get; set;}
public IEnumerable<FunctionContract> FunctionContracts {get; set;}
#>